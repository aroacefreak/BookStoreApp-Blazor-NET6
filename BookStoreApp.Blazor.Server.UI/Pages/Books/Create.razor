@page "/books/create/"
@using BookStoreApp.Blazor.Server.UI.Models
@attribute [Authorize(Roles = Roles.Administrator)]
@inject IBookService bookService
@inject IAuthorService authorService
@inject NavigationManager navManager
<h3>Create new Book</h3>

<EditForm model="Book" OnValidSubmit="HandleBookCreate">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label for="firstname">Book Title</label>
		<InputText @bind-Value="Book.Title" class="form-control" id="title"/>
		<ValidationMessage For="@(() => Book.Title)"/>
	</div>
	<br/>
	<div class="form-group">
		<label for="firstname">ISBN</label>
		<InputText @bind-Value="Book.Isbn" class="form-control" id="isbn"/>
		<ValidationMessage For="@(() => Book.Isbn)"/>
	</div>
	<br/>
	<div class="form-group">
		<label for="firstname">Price</label>
		<InputNumber @bind-Value="Book.Price" class="form-control" id="price"/>
		<ValidationMessage For="@(() => Book.Price)"/>
	</div>
	<br/>
	<div class="form-group">
		<label for="firstname">Year</label>
		<InputNumber @bind-Value="Book.Year" class="form-control" id="year"/>
		<ValidationMessage For="@(() => Book.Year)"/>
	</div>
	<br/>
	<div class="form-group">
		<label for="firstname">Summary</label>
		<InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary"/>
		<ValidationMessage For="@(() => Book.Summary)"/>
	</div>
	<br/>
	<div class="form-group">
		<label for="firstname">Author</label>
		<InputSelect @bind-Value="Book.AuthorId" class="form-control" id="author">
			<option value="">-- Select Author --</option>
			@foreach(var author in Authors)
			{
				<option value="@author.Id">@author.FirstName @author.LastName</option>
			}
		</InputSelect>
		<ValidationMessage For="@(() => Book.AuthorId)"/>

	</div>
	<br/>
	<div class="form-group">
		<label>Book Cover Photo</label>
		<div>
			<InputFile OnChange="HandleFileSelection" />
			<img src="@img" width="100" height="100"/>
			<p class="text-danger">@UploadFileWarning</p>
		</div>
	</div>
	<button @onclick="HandleBookCreate" class="btn btn-outline-primary">
		<span class="oi oi-pencil"></span>
		Create Book
	</button>
	<br/>
	<button @onclick="BackToList" class="btn btn-outline-secondary" type="button">
		<span class="oi oi-media-skip-backward"></span>
		Back To List
	</button>
</EditForm>

@code {
	private BookCreateDto Book = new BookCreateDto();
	private List<AuthorReadOnlyDto> Authors = new List<AuthorReadOnlyDto>();
	private string UploadFileWarning = string.Empty;
	private string img = string.Empty;
	private long maxFileSize = 1024 * 1024 * 5;

	protected override async Task OnInitializedAsync()
	{
		var response = await authorService.Get(new QueryParameters());
		if (response.Success){
			Authors = response.Data.Items.ToList();
		}
	}

	private async Task HandleBookCreate()
	{
		var response = await bookService.Create(Book);
		{
			if (response.Success)
			{
				BackToList();
			}
		}
	}

	private async Task HandleFileSelection(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null)
		{
			if (file.Size > maxFileSize)
			{
				UploadFileWarning = "This file is too big for upload";
				return;
			}
			var ext = System.IO.Path.GetExtension(file.Name);
			if ((ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg")) == false)
			{
				UploadFileWarning = "Please select a valid image file (*jpg | *.png)";
				return;
			}
			var byteArray = new byte[file.Size];
			await file.OpenReadStream().ReadAsync(byteArray);
			string imageType = file.ContentType;
			string base64String = Convert.ToBase64String(byteArray);

			Book.ImageData = base64String;
			Book.OriginalImageName = file.Name;
			img = $"data:{imageType}; base64, {base64String}";
		}
	}

	private void BackToList()
	{
		navManager.NavigateTo("/books/");
	}
}
