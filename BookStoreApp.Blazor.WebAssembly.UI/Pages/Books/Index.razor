@page "/books/"
@using BookStoreApp.Blazor.WebAssembly.UI.Models
@inject IBookService bookService
@inject IJSRuntime js
<h3>Index</h3>

@if (response.Success == false)
{
	<div class="alert alert-danger">
		<h4>@response.Message</h4>
	</div>
}
else
{
	@if (Books == null)
	{
		<div class="alert alert-info">
			<h4>Loading Data...</h4>
		</div>
	}
	else
	{
		<AuthorizeView Roles=@Roles.Administrator>
			<a class="btn btn-primary" href="/books/create"><span class="oi oi-plus" aria-hidden="true"></span>Create </a>
		</AuthorizeView>
		
		<br/>
		<BookTable Books="Books" TotalSize="TotalSize" OnScroll="LoadBooks"/>
@*		<table class="table table-responsive">
			<thead>
			<tr>
				<th></th>
				<th>Title</th>
				<th>Price</th>
				<th>Author Name</th>
				<th>Action</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var book in Books)
			{
				<tr>
					<td>
						<img src="@book.Image" width="100" height="100" alt="@book.Title"/>
					</td>
					<td>@book.Title</td>
					<td>@book.Price.ToString("C")</td>
					<td><a class="btn btn-link" href="/books/details/@book.AuthorId">@book.AuthorName</a></td>
					<td>
						<a class="btn btn-primary" href="/books/details/@book.Id"><span class="oi oi-book" aria-hidden="true"></span>Details </a>
						<AuthorizeView Roles=@Roles.Administrator>
							<a class="btn btn-warning" href="/books/update/@book.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit </a>
							<button class="btn btn-danger" @onclick=@(() => Delete(book.Id))><span class="oi oi-delete" aria-hidden="true"></span>Delete </button>
						</AuthorizeView>
					</td>
				</tr>
			}
			</tbody>
		</table>*@
	}
}

@code {
	private List<BookReadOnlyDto> Books;
	
	public int TotalSize { get; set; }
	private Response<BookReadOnlyDtoVirtualiseResponse> response = new Response<BookReadOnlyDtoVirtualiseResponse>(){Success = true};

	protected override async Task OnInitializedAsync()
	{
		response = await bookService.Get(new QueryParameters());
		if (response.Success)
		{
			Books = response.Data.Items.ToList();
		}
	}

	private async Task LoadBooks(QueryParameters queryParams)
	{
		var virtualiseResult = await bookService.Get(queryParams);
		Books = virtualiseResult.Data.Items.ToList();
		TotalSize = virtualiseResult.Data.TotalSize;
	}

}
